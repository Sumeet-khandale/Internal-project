package com.MovieService.Controller;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.MovieService.Entity.Genre;
import com.MovieService.Entity.Theatre;
import com.MovieService.Services.TheatreService;


@RestController
@PreAuthorize("hasRole('ADMIN')")
@RequestMapping("/theatres")
public class TheatreController {
    @Autowired
    private  TheatreService theatreService;
    public TheatreController(TheatreService theatreService) {
        this.theatreService = theatreService;
    }

    @PostMapping
    public ResponseEntity<Theatre> create(@RequestBody Theatre theatre) {
        return ResponseEntity.ok(theatreService.createTheatre(theatre));
    }

    @GetMapping
    public ResponseEntity<List<Theatre>> getAll() {
        return ResponseEntity.ok(theatreService.getAllTheatres());
    }

    
    @GetMapping("/{id}")
    public ResponseEntity<Theatre> getById(@PathVariable Long id) {
    	Theatre thetre = theatreService.getTheatreById(id); // Will throw if not found
        return ResponseEntity.ok(thetre);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Theatre> update(@PathVariable Long id, @RequestBody Theatre theatre) {
        return ResponseEntity.ok(theatreService.updateTheatre(id, theatre));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        theatreService.deleteTheatre(id);
        return ResponseEntity.noContent().build();
    }

}
