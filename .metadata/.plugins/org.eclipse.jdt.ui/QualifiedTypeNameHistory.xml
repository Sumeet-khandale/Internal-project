<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<qualifiedTypeNameHistroy>
    <fullyQualifiedTypeName name="com.PaymentService.Service.PaymentGatewayClient"/>
    <fullyQualifiedTypeName name="com.PaymentService.Service.PaymentServiceImpl"/>
    <fullyQualifiedTypeName name="com.PaymentService.dto.PaymentResponseDTO"/>
    <fullyQualifiedTypeName name="com.PaymentService.entity.PaymentTransaction"/>
    <fullyQualifiedTypeName name="com.PaymentService.dto.PaymentRequestDTO"/>
    <fullyQualifiedTypeName name="com.NotificationService.sender.EmailSender"/>
    <fullyQualifiedTypeName name="java.time.LocalDate"/>
    <fullyQualifiedTypeName name="java.util.Collection"/>
    <fullyQualifiedTypeName name="java.util.Collections"/>
    <fullyQualifiedTypeName name="org.hibernate.engine.internal.Collections"/>
    <fullyQualifiedTypeName name="com.MovieService.Services.MovieService"/>
    <fullyQualifiedTypeName name="com.MovieService.Entity.Movie"/>
    <fullyQualifiedTypeName name="com.MovieService.EnumType.MovieStatus"/>
    <fullyQualifiedTypeName name="com.MovieService.Services.ScreenService"/>
    <fullyQualifiedTypeName name="com.MovieService.Entity.Screen"/>
    <fullyQualifiedTypeName name="com.MovieService.Services.TheatreService"/>
    <fullyQualifiedTypeName name="com.MovieService.Entity.Theatre"/>
    <fullyQualifiedTypeName name="com.MovieService.Services.GenreService"/>
    <fullyQualifiedTypeName name="com.MovieService.Entity.Genre"/>
    <fullyQualifiedTypeName name="com.MovieService.Services.ShowtimeService"/>
    <fullyQualifiedTypeName name="com.MovieService.Entity.Showtime"/>
    <fullyQualifiedTypeName name="com.BookingService.Repositories.BookingRepository"/>
    <fullyQualifiedTypeName name="com.BookingService.Repositories.BookedSeatRepository"/>
    <fullyQualifiedTypeName name="com.BookingService.Service.BookingService"/>
    <fullyQualifiedTypeName name="com.BookingService.Entities.Booking"/>
    <fullyQualifiedTypeName name="com.BookingService.Enum.BookingStatus"/>
    <fullyQualifiedTypeName name="org.mockito.Mock"/>
    <fullyQualifiedTypeName name="org.mockito.InjectMocks"/>
    <fullyQualifiedTypeName name="org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest"/>
    <fullyQualifiedTypeName name="org.springframework.boot.test.mock.mockito.MockBean"/>
    <fullyQualifiedTypeName name="org.mockito.Mockito"/>
    <fullyQualifiedTypeName name="org.springframework.boot.test.context.SpringBootTest"/>
    <fullyQualifiedTypeName name="org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc"/>
    <fullyQualifiedTypeName name="org.springframework.beans.factory.annotation.Autowired"/>
    <fullyQualifiedTypeName name="org.springframework.test.web.servlet.MockMvc"/>
    <fullyQualifiedTypeName name="org.junit.jupiter.api.Test"/>
    <fullyQualifiedTypeName name="com.UserService.Controller.UserController"/>
    <fullyQualifiedTypeName name="com.UserService.Services.UserService"/>
    <fullyQualifiedTypeName name="com.UserService.Config.UserMapper"/>
    <fullyQualifiedTypeName name="com.UserService.Services.UserServiceImpl"/>
    <fullyQualifiedTypeName name="Exception.ResourceNotFoundException"/>
    <fullyQualifiedTypeName name="lombok.AllArgsConstructor"/>
    <fullyQualifiedTypeName name="lombok.Getter"/>
    <fullyQualifiedTypeName name="jakarta.persistence.Enumerated"/>
    <fullyQualifiedTypeName name="jakarta.persistence.EnumType"/>
    <fullyQualifiedTypeName name="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <fullyQualifiedTypeName name="lombok.RequiredArgsConstructor"/>
    <fullyQualifiedTypeName name="com.UserService.Repositories.UserRepository"/>
    <fullyQualifiedTypeName name="org.springframework.security.crypto.password.PasswordEncoder"/>
    <fullyQualifiedTypeName name="com.UserService.Dto.UserDTO"/>
    <fullyQualifiedTypeName name="com.UserService.Entity.User"/>
    <fullyQualifiedTypeName name="java.util.Optional"/>
    <fullyQualifiedTypeName name="com.UserService.Enum.Role"/>
    <fullyQualifiedTypeName name="org.springframework.http.HttpStatus"/>
    <fullyQualifiedTypeName name="java.util.List"/>
    <fullyQualifiedTypeName name="org.springframework.security.core.authority.SimpleGrantedAuthority"/>
    <fullyQualifiedTypeName name="com.MovieService.Services.CustomUserDetailsService"/>
    <fullyQualifiedTypeName name="com.MovieService.Services.JwtService"/>
    <fullyQualifiedTypeName name="org.springframework.security.access.prepost.PreAuthorize"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.netflix.eureka.server.EnableEurekaServer"/>
</qualifiedTypeNameHistroy>
